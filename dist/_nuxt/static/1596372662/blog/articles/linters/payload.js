__NUXT_JSONP__("/blog/articles/linters", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){return {data:[{article:{title:n,description:"A short discussion of linters, fixers, etc. that I use for web development.",img:"chunlea-ju-8fs1X0JFgFE-unsplash.jpg",alt:n,featured:0,author:{name:"Jesse Quinn",bio:"All about Jesse",img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1533636721434-0e2d61030955?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2550&q=80",alt:"profile photo"},publishedAt:"2019-10-28T03:00:00.000Z",updateAt:m,toc:[],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"I just want to briefly discuss several packages that I use for maintaining web development projects. "}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"First I want to talk about the "},{type:b,tag:"a",props:{href:"https:\u002F\u002Fgithub.com\u002Ftypicode\u002Fhusky",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"Husky"}]},{type:a,value:" package. Most, if not everyone, that works with software\u002Fweb development has come across Github or some sort of version control system (VCS). Well Husky offers a very useful way of simply accessing all sorts of hooks for Git. For instance, I can place a "},{type:b,tag:c,props:{},children:[{type:a,value:k}]},{type:a,value:" option under "},{type:b,tag:c,props:{},children:[{type:a,value:"hooks"}]},{type:a,value:" in my "},{type:b,tag:c,props:{},children:[{type:a,value:l}]},{type:a,value:" file that includes a call to a script, cmd, or whatever. Hang on, just hang on, I just skipped over all sorts of information."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"What is a hook? Why do we want such an option? The list of questions goes on... Well simply put a hook is an action that occurs when adding, comitting, pushing, etc. to a VCS. I would want this option, for instance, to run a linter, something that will clean up my code, or even, fix it. Although, the list of reasons are numerous, this is my primary reason for playing around with hooks. "}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Before getting into installations and configurations for Husky, Prettier (a linter), and php-cs-fixer (php code fixer), we need to install nodejs. I am using Manjaro, so I can quickly install nodejs through the AUR Archlinux Repository with the `"},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:" package."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Once installed we need to update our .bashrc."}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"echo 'source \u002Fusr\u002Fshare\u002Fnvm\u002Finit-nvm.sh' \u003E\u003E ~\u002F.bashrc\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Now lets install nodejs using "},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:" along with "},{type:b,tag:c,props:{},children:[{type:a,value:"yarn"}]},{type:a,value:p}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"nvm install 10.15.3 # as an example\nnpm install -g yarn\necho 'export PATH=$PATH:~\u002F.yarn\u002Fbin' \u003E\u003E ~\u002F.bashrc\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Obviously, this process is different for Windows. OSX users could easily install via Homebrew."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"With npm\u002Fyarn installed we can now begin by installing some npm packages. "}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"yarn add lint-staged husky prettier --dev\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This command will add several packages to our "},{type:b,tag:c,props:{},children:[{type:a,value:"devDependencies"}]},{type:a,value:" found in the "},{type:b,tag:c,props:{},children:[{type:a,value:l}]},{type:a,value:"."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Now lets add a hook for lint-staged."}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"{\n    \"husky\": {\n        \"hooks\": {\n            \"pre-commit\": \"lint-staged\"\n        }\n    },\n    \"lint-staged\": {\n        \"*.{js,json,css,md}\": [\"prettier --write\", \"git add\"]\n    }\n}\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"So what have i done? Firstly, I have installed the husky package. This will run a script in the background that will prepare your "},{type:b,tag:c,props:{},children:[{type:a,value:".git\u002Fhooks\u002F**scripts**"}]},{type:a,value:". Lastly, I have added a hook known as "},{type:b,tag:c,props:{},children:[{type:a,value:k}]},{type:a,value:" to the "},{type:b,tag:c,props:{},children:[{type:a,value:l}]},{type:a,value:" that will call "},{type:b,tag:c,props:{},children:[{type:a,value:q}]},{type:a,value:". "},{type:b,tag:c,props:{},children:[{type:a,value:q}]},{type:a,value:" actually calls "},{type:b,tag:c,props:{},children:[{type:a,value:r}]},{type:a,value:", an opinionated code formatter, for js, css, json, yaml, etc. and then the command "},{type:b,tag:c,props:{},children:[{type:a,value:"git add"}]},{type:a,value:". So every time I run "},{type:b,tag:c,props:{},children:[{type:a,value:"git commit"}]},{type:a,value:" the "},{type:b,tag:c,props:{},children:[{type:a,value:k}]},{type:a,value:" hook will be called that runs "},{type:b,tag:c,props:{},children:[{type:a,value:r}]},{type:a,value:" on any js, json, css, md file and then readds them for the final commit. "}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"We can customize this further, as an example:"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"\"scripts\": {\n    \"format-css-js\": \"prettier --write --config .prettierrc 'public\u002F**\u002F*.{css,js,vue}'\",\n    \"format-php\": \"prettier --write --config .prettierrc-php 'public\u002F**\u002F*.php' 'src\u002F**\u002F*.php'\"\n},\n\"husky\": {\n    \"hooks\": {\n        \"pre-commit\": \"lint-staged\",\n        \"commit-msg\": \"commitlint --edit $HUSKY_GIT_PARAMS\"\n    }\n},\n\"lint-staged\": {\n    \"*.php\": [\n        \"npm run format-php\",\n        \"git add\"\n    ]\n}\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"With this code I am using the "},{type:b,tag:c,props:{},children:[{type:a,value:"@prettier\u002Fplugin-php"}]},{type:a,value:" plugin, which will format PHP code. "},{type:b,tag:"strong",props:{},children:[{type:a,value:" Currently there is a bug "}]},{type:a,value:" that causes all "},{type:b,tag:c,props:{},children:[{type:a,value:s}]},{type:a,value:" to fail unless it uses specifically an option that exists for the plugin. For instance, I use a "},{type:b,tag:c,props:{},children:[{type:a,value:".prettierrc"}]},{type:a,value:" configuration file that looks like"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"{\n    \"printWidth\": 100,\n    \"singleQuote\": true,\n    \"tabWidth\": 4,\n    \"trailingComma\": \"es5\"\n}\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This will fail because the "},{type:b,tag:c,props:{},children:[{type:a,value:s}]},{type:a,value:" is set to "},{type:b,tag:c,props:{},children:[{type:a,value:"es5"}]},{type:a,value:". Therefore, I use a separate configuration file specifically for PHP that looks like"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"{\n    \"printWidth\": 100,\n    \"singleQuote\": true,\n    \"tabWidth\": 4,\n    \"trailingComma\": \"php7.2\",\n    \"braceStyle\": \"psr-2\"\n}\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"In future I will use "},{type:b,tag:c,props:{},children:[{type:a,value:"overrides"}]},{type:a,value:" as described in the prettier documentation; however, as stated previously, this bug exists and overrides do not fix it."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"I also use "},{type:b,tag:c,props:{},children:[{type:a,value:"friendsofphp\u002Fphp-cs-fixer"}]},{type:a,value:" package for PHP code formatting and alteration. However, this package must be installed via "},{type:b,tag:c,props:{},children:[{type:a,value:"composer"}]},{type:a,value:p}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"composer require friendsofphp\u002Fphp-cs-fixer --dev\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This package requires a "},{type:b,tag:c,props:{},children:[{type:a,value:".php_cs"}]},{type:a,value:" file and mine looks like"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"\u003C?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n        -\u003EnotPath('vendor')\n        -\u003EnotPath('cache')\n        -\u003EnotPath('logs')\n        -\u003EnotPath('tests')\n        -\u003Ein(__DIR__)\n        -\u003Ename(['*.php','*.twig']);\n\nreturn PhpCsFixer\\Config::create()\n        -\u003EsetRules([\n                '@PSR2' =\u003E true,\n                'array_syntax' =\u003E ['syntax' =\u003E 'short'],\n                'ordered_imports' =\u003E ['sortAlgorithm' =\u003E 'alpha'],\n                'no_unused_imports' =\u003E true,\n                'no_useless_else' =\u003E true,\n                'no_useless_return' =\u003E true,\n                'blank_line_after_namespace' =\u003E true,\n                'elseif' =\u003E true,\n                'encoding' =\u003E true,\n        ])\n        -\u003EsetFinder($finder);\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Essentially I ignore several paths and use only "},{type:b,tag:c,props:{},children:[{type:a,value:".php"}]},{type:a,value:" and "},{type:b,tag:c,props:{},children:[{type:a,value:".twig"}]},{type:a,value:" files for code formatting and alteration. I also set rules for "},{type:b,tag:c,props:{},children:[{type:a,value:"php-cs-fixer"}]},{type:a,value:" here. Under scripts in the "},{type:b,tag:c,props:{},children:[{type:a,value:"composer.json"}]},{type:a,value:" file I have added"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"\"scripts\": {\n    \"format\": [\n        \"vendor\u002Fbin\u002Fphp-cs-fixer fix\"\n    ]\n}\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This script now allows me to simply run"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"composer format\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Now I can add this to the "},{type:b,tag:c,props:{},children:[{type:a,value:k}]},{type:a,value:" hook in the "},{type:b,tag:c,props:{},children:[{type:a,value:l}]},{type:a,value:" file"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"\"lint-staged\": {\n    \"*.php\": [\n        \"npm run format-php\",\n        \"composer format\",\n        \"git add\"\n    ]\n}\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"In general, I find this method of cleaning up code prior to a commit very useful. To go even further, I have implemented a commit linter. "}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"npm install @commitlint\u002Fcli @commitlint\u002Fconfig-conventional --save-dev\necho \"module.exports = {extends: ['@commitlint\u002Fconfig-conventional']}\" \u003E commitlint.config.js\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This package enforces a more semantic meaning to your git history."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"All in all, I really appreciate npm and composer package mangers and the many packages available for programmers to use."}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002Flinters",extension:".md",slug:"linters",createdAt:"2020-07-22T00:27:09.708Z",updatedAt:"2020-07-22T00:30:14.104Z"},prev:{title:"LAMP Installation on Manjaro",updateAt:m,slug:"lamp"},next:{title:"MLPs with Numpy",updateAt:m,slug:"mlp-numpy"}}],fetch:[],mutations:[]}}("text","element","code","\n","p","div","nuxt-content-highlight","pre","language-text","line-numbers","pre-commit","package.json","2020-07-19T03:00:00.000Z","Working with Linters, Fixers, Hooks for Github, etc.","nvm",":","lint-staged","prettier","trailingComma")));