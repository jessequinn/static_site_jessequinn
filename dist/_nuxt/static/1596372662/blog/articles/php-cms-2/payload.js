__NUXT_JSONP__("/blog/articles/php-cms-2", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){return {data:[{article:{title:m,description:"A continuation of developing a CMS with the Slim microframework",img:"joao-tzanno-G9_Euqxpu4k-unsplash.jpg",alt:m,featured:0,author:{name:"Jesse Quinn",bio:"All about Jesse",img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1533636721434-0e2d61030955?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2550&q=80",alt:"profile photo"},publishedAt:"2019-10-28T03:00:00.000Z",updateAt:k,toc:[],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"So I left off talking about the "},{type:b,tag:c,props:{},children:[{type:a,value:"settings.php"}]},{type:a,value:l},{type:b,tag:c,props:{},children:[{type:a,value:n}]},{type:a,value:". Prior to continuing, I believe I should mention a recent newsletter from "},{type:b,tag:"a",props:{href:"https:\u002F\u002Fblog.heroku.com\u002Ften-ways-to-secure-your-apps?c=7013A000000ZKSnQAO&utm_campaign=Newsletter_March_2019&utm_medium=email&utm_source=newsletter&utm_content=blog&utm_term=ten-ways-secure-app",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"Heroku"}]},{type:a,value:" that covers security. Within the newsletter one method to maintaining a safe site, and in general good practice, is to keep your pacakges up to date. Therefore, lets run"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"composer update\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This command will update all packages found in the "},{type:b,tag:c,props:{},children:[{type:a,value:"composer.json"}]},{type:a,value:" under the "},{type:b,tag:c,props:{},children:[{type:a,value:"require"}]},{type:a,value:l},{type:b,tag:c,props:{},children:[{type:a,value:"require-dev"}]},{type:a,value:" sections."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"So following the order of required php files in the "},{type:b,tag:c,props:{},children:[{type:a,value:n}]},{type:a,value:", the subsequent file would be "},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:". For security reasons and for simplicity I will only show some of the code in my file."}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"\u003C?php\n\u002F\u002F DIC configuration\n$container = $app-\u003EgetContainer();\n\n\u002F\u002F Twig extension\n\u002F\u002F https:\u002F\u002Fgithub.com\u002Faptoma\u002Ftwig-markdown\nuse Aptoma\\Twig\\Extension\\MarkdownExtension;\nuse Aptoma\\Twig\\Extension\\MarkdownEngine;\n\n$engine = new MarkdownEngine\\MichelfMarkdownEngine();\n\n\u002F\u002F View\n$container['view'] = function ($c) {\n        global $engine;\n        $view = new \\Slim\\Views\\Twig($c['settings']['view']['template_path'], $c['settings']['view']['twig']);\n        \u002F\u002F Add extensions\n        $view-\u003EaddExtension(new Slim\\Views\\TwigExtension($c['router'], $c['request']-\u003EgetUri()));\n\u002F\u002F    $view-\u003EaddExtension(new Bookshelf\\TwigExtension($c['flash']));\n        $view-\u003EaddExtension(new MarkdownExtension($engine));\n        $view-\u003EaddExtension(new Site\\AppModeExtension());\n        $view-\u003EaddExtension(new Site\\RandomIdExtension());\n        return $view;\n};\n\n\u002F\u002F CSRF guard\n$container['csrf'] = function ($c) {\n        $guard = new \\Slim\\Csrf\\Guard();\n        $guard-\u003EsetFailureCallable(function ($request, $response, $next) {\n                $request = $request-\u003EwithAttribute(\"csrf_status\", false);\n                return $next($request, $response);\n        });\n        return $guard;\n};\n\n\u002F\u002F Flash messages\n$container['flash'] = function ($c) {\n        return new \\Slim\\Flash\\Messages;\n};\n\n\u002F\u002F monolog\n$container['logger'] = function ($c) {\n        $settings = $c-\u003Eget('settings')['logger'];\n        $logger = new Monolog\\Logger($settings['name']);\n        $logger-\u003EpushProcessor(new Monolog\\Processor\\UidProcessor());\n        $logger-\u003EpushHandler(new Monolog\\Handler\\StreamHandler($settings['path'], $settings['level']));\n        return $logger;\n};\n\n\u002F\u002F Database\n$capsule = new Illuminate\\Database\\Capsule\\Manager;\n$capsule-\u003EaddConnection($container['settings']['db']);\n$capsule-\u003EsetAsGlobal();\n$capsule-\u003EbootEloquent();\n$container['db'] = function ($c) use ($capsule) {\n        return $capsule;\n};\n\n$container[Blog\\BlogController::class] = function ($c) {\n$view = $c-\u003Eget('view');\n$logger = $c-\u003Eget('logger');\n$router = $c-\u003Eget('router');\n$flash = $c-\u003Eget('flash');\nreturn new \\Blog\\BlogController($view, $logger, $router, $flash);\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"};"}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"As you can see the "},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:" holds all the dependency injection containers (DICs). In other words, I will include containers for twig (view), csrf guard, flash messaging, loggers, database connections, controllers, etc. Essentially anything and all that is related to the app that we can configure immediately and store so that when the time comes we can use them."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"The next import file is the `"},{type:b,tag:c,props:{},children:[{type:a,value:"middleware.php"}]},{type:a,value:" file. As an example,"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"\u003C?php\n\u002F\u002F Application middleware\n\n$app-\u003Eadd($app-\u003EgetContainer()-\u003Eget('csrf'));\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"I placed the csrf guard in the middleware as documented by Slim. The middleware file is meant to run code before and after your Slim application to manipulate the "},{type:b,tag:c,props:{},children:[{type:a,value:"request"}]},{type:a,value:l},{type:b,tag:c,props:{},children:[{type:a,value:"response"}]},{type:a,value:" objects."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"The last file required is the "},{type:b,tag:c,props:{},children:[{type:a,value:"routes.php"}]},{type:a,value:". Again, for security reasons I can only show partial information:"}]},{type:a,value:d},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"\u003C?php\n\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\n\n\u002F\u002F Index\n$app-\u003Eget('\u002F', 'Site\\IndexController:loadSite')-\u003EsetName('site');\n\n$app-\u003Eget('\u002Fadmin', 'Admin\\SomeController:loadAdminSite')\n        -\u003EsetName('admin-site');\n        \n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"The routes file contains all your routing. There are multiple ways of writing this file; however, I use controllers and so I need to use the callable "},{type:b,tag:c,props:{},children:[{type:a,value:"Site\\IndexController:loadSite"}]},{type:a,value:", for instance, where "},{type:b,tag:c,props:{},children:[{type:a,value:"Site"}]},{type:a,value:" is a namespace\u002Ffolder, IndexController is the class, and loadSite is the function called to render the page. The setName('site') allows me to refer to this route quickly and easily by using a function like "},{type:b,tag:c,props:{},children:[{type:a,value:"pathFor"}]},{type:a,value:" in PHP or "},{type:b,tag:c,props:{},children:[{type:a,value:"path_for"}]},{type:a,value:" in Twig."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"To be continued ..."}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002Fphp-cms-2",extension:".md",slug:"php-cms-2",createdAt:"2020-07-22T00:27:09.702Z",updatedAt:"2020-07-22T00:30:14.094Z"},prev:{title:"An interesting adventure with a PHP CMS \u002F\u002F Part 1",updateAt:k,slug:"php-cms-1"},next:{title:"PyQt5 Programming",updateAt:k,slug:"pyqt5"}}],fetch:[],mutations:[]}}("text","element","code","\n","p","div","nuxt-content-highlight","pre","language-text","line-numbers","2020-07-19T03:00:00.000Z"," and ","An interesting adventure with a PHP CMS \u002F\u002F Part 2","index.php","dependencies.php")));