__NUXT_JSONP__("/blog/articles/graylog", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y){return {data:[{article:{title:r,description:"Graylog installation on Manjaro and discussion of a multi-node setup.",img:"patrick-hendry-HBeI5X212lU-unsplash.jpg",alt:r,featured:0,author:{name:"Jesse Quinn",bio:"All about Jesse",img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1533636721434-0e2d61030955?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2550&q=80",alt:"profile photo"},publishedAt:"2019-10-28T03:00:00.000Z",updateAt:q,toc:[],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"First I need to state that I originally wanted a multi-node Graylog 3 install. However, that dream was put on hold as it was disastrous to setup. "}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"If we look at the "},{type:b,tag:k,props:{href:"http:\u002F\u002Fdocs.graylog.org\u002Fen\u002F3.0\u002Fpages\u002Fconfiguration\u002Fmultinode_setup.html",rel:[l,m,n],target:o},children:[{type:a,value:p}]},{type:a,value:" on the subject we will see that there are several prerequisites, regardless if you want single or multi-node, such as mongodb and elasticsearch."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Well with a single node we do not need to worry about this, but, if you would like a multi-node setup we need to make a replica set ("},{type:b,tag:d,props:{},children:[{type:a,value:s}]},{type:a,value:"), and in retrospect, this could be where i went wrong. For instance, i used "},{type:b,tag:d,props:{},children:[{type:a,value:t}]},{type:a,value:". Next, create the "},{type:b,tag:d,props:{},children:[{type:a,value:u}]},{type:a,value:" database user with "},{type:b,tag:d,props:{},children:[{type:a,value:"readWrite"}]},{type:a,value:" and "},{type:b,tag:d,props:{},children:[{type:a,value:"dbAdmin"}]},{type:a,value:" rights. Sounds simple?"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Let's look at the mongodb "},{type:b,tag:k,props:{href:"https:\u002F\u002Fdocs.mongodb.com\u002Fmanual\u002Ftutorial\u002Fdeploy-replica-set\u002F",rel:[l,m,n],target:o},children:[{type:a,value:p}]},{type:a,value:" and also these "},{type:b,tag:k,props:{href:"https:\u002F\u002Fdocs.mongodb.com\u002Fv2.6\u002Ftutorial\u002Fdeploy-replica-set-with-auth\u002F",rel:[l,m,n],target:o},children:[{type:a,value:p}]},{type:a,value:" on making a replica set. Mongodb suggests making two accounts for authorization."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"use admin\ndb.createUser( {\n    user: \"siteUserAdmin\",\n    pwd: \"\u003Cpassword\u003E\",\n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]\n});\ndb.createUser( {\n    user: \"siteRootAdmin\",\n    pwd: \"\u003Cpassword\u003E\",\n    roles: [ { role: \"root\", db: \"admin\" } ]\n});\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This of course occurs with zero authorization enabled in the "},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:" (on manjaro):"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"# security:\n  # authorization: enabled\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"assuming you have this in the configuration file otherwise by default I believe, atleast with manjaro, mongodb has no authorization requirement... scary..."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"So, once those two admins are created you can stop the "},{type:b,tag:d,props:{},children:[{type:a,value:"mongod"}]},{type:a,value:" service, again on manjaro, "},{type:b,tag:d,props:{},children:[{type:a,value:"sudo systemctl stop mongodb"}]},{type:a,value:". I have assumed you already did the following:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"# need to install mongodb-bin from AUR\nyay mongodb-bin \nsudo systemctl enable mongodb\nsudo systemctl start mongodb\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Next we need to make a keyfile that allows all members access to the replica set:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"sudo openssl rand -base64 741 \u003E \u002Fetc\u002Fmongodb-keyfile\nsudo chmod 600 mongodb-keyfile\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Send this keyfile and place it in all members "},{type:b,tag:d,props:{},children:[{type:a,value:"\u002Fetc"}]},{type:a,value:" folder or somewhere safe that mongodb can access it."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"In my opinion it is best to use the configuration file to add the keyfile rather than directly adding to a systemd service:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"replication:\n replSetName: rs01\nsecurity:\n authorization: enabled\n keyFile: \u002Fetc\u002Fmongodb-keyfile\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"as an example rather than "}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"mongod --keyFile \u002Fetc\u002Fmongodb-keyfile --replSet \"rs01\"\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Again, I believe that my error was using "},{type:b,tag:d,props:{},children:[{type:a,value:t}]},{type:a,value:". So stick to what the graylog 3 docs say and use the "},{type:b,tag:d,props:{},children:[{type:a,value:s}]},{type:a,value:"."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"sudo systemctl start mongodb\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"check the service status and make sure that it is running otherwise refer to "},{type:b,tag:d,props:{},children:[{type:a,value:"sudo journalctl -xe"}]},{type:a,value:" for errors."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"login into mongodb "}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"mongo -u siteRootAdmin -p \u003Cpassword\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"initiate the replica set on the master node and include all mongodb servers (one per node)"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"rs.initiate( {\n    _id : \"rs01\",\n    members: [\n        { _id: 0, host: \"mongodb0.example.net:27017\" },\n        { _id: 1, host: \"mongodb1.example.net:27017\" },\n        { _id: 2, host: \"mongodb2.example.net:27017\" }\n    ]\n})\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"confirm using "},{type:b,tag:d,props:{},children:[{type:a,value:"rs.conf()"}]},{type:a,value:" and ensure the replica set has a primary ("},{type:b,tag:d,props:{},children:[{type:a,value:"rs.status"}]},{type:a,value:"). "}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:w,props:{},children:[{type:a,value:x}]},{type:a,value:" "}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"you do not need to perform the replica set on the other nodes just on the master. However, you do need to make the "},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:" the same in regards to stating the replication set and authorization with the keyfile."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Essentially the configuration file should look like this:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"# See http:\u002F\u002Fwww.mongodb.org\u002Fdisplay\u002FDOCS\u002FFile+Based+Configuration for format details\n# Run mongod --help to see a list of options\n\nsystemLog:\n destination: file\n path: \u002Fvar\u002Flog\u002Fmongodb\u002Fmongod.log\n logAppend: true\n quiet: true\nstorage:\n journal:\n  enabled: true\n dbPath: \u002Fvar\u002Flib\u002Fmongodb\nnet:\n bindIp: 0.0.0.0 # for all ips, but one could use ip addr show to get the ip of the machine and place here \n port: 27017\nreplication:\n replSetName: rs01\nsecurity:\n authorization: enabled\n keyFile: \u002Fetc\u002Fmongodb-keyfile\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Finally create the graylog database user:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"use graylog\ndb.createUser(\n{\n    user: \"productsDBAdmin\",\n    pwd: \"\u003Cpassword\u003E\",\n    roles:\n    [{role: \"readWrite\", db: \"graylog\"}, {role: \"dbAdmin\", db: \"graylog\"}]\n})\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"From what i understand this is how you would setup the replica set and have a functional multi-node mongodb. If you only want the single-node setup, forget making the replica set and remove it from the configuration file as I did."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now onto more potential headaches... "}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"sudo pacman -S elasticsearch\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Once elasticsearch is installed configure the the "},{type:b,tag:d,props:{},children:[{type:a,value:"\u002Fetc\u002Felasticsearch\u002Felastichsearch.yml"}]},{type:a,value:" as such:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"cluster:\n name: \u003Cclustername\u003E\nnetwork:\n host: 0.0.0.0\nhttp:\n port: 9200\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"for single-node; however, again, some trial and error here, multi-node requires "},{type:b,tag:d,props:{},children:[{type:a,value:"network.host"}]},{type:a,value:", "},{type:b,tag:d,props:{},children:[{type:a,value:"discovery.zen.ping.unicast.hosts"}]},{type:a,value:", and "},{type:b,tag:d,props:{},children:[{type:a,value:y}]},{type:a,value:". Refer to the "},{type:b,tag:k,props:{href:"https:\u002F\u002Fwww.elastic.co\u002Fguide\u002Fen\u002Felasticsearch\u002Freference\u002F5.4\u002Fsetup.html",rel:[l,m,n],target:o},children:[{type:a,value:p}]},{type:a,value:" for encrypted access. My configuration file uses YAML format, but you could also just use "},{type:b,tag:d,props:{},children:[{type:a,value:"cluster.name: \u003Cclustername\u003E"}]},{type:a,value:" as well."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:w,props:{},children:[{type:a,value:x}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:"clustername"}]},{type:a,value:" needs to be same for all nodes and "},{type:b,tag:d,props:{},children:[{type:a,value:y}]},{type:a,value:" needs to be unique."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"I believe this is all that is required for the elasticsearch components."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The last step is to install and configure Graylog 3."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"yay graylog\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"We need to play around a lot to get the server correctly operating. For single node the following "},{type:b,tag:d,props:{},children:[{type:a,value:"\u002Fetc\u002Fgraylog\u002Fserver\u002Fserver.conf"}]},{type:a,value:" works for me."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"is_master = true\nnode_id_file = \u002Fetc\u002Fgraylog\u002Fserver\u002Fcrateris\npassword_secret = \u003Cpassword\u003E # read doc to generate with pwgen -N 1 -s 96\nroot_username = admin\nroot_password_sha2 = \u003Cpassword\u003E # echo -n \"Enter Password: \" && head -1 \u003C\u002Fdev\u002Fstdin | tr -d '\\n' | sha256sum | cut -d\" \" -f1\nplugin_dir = \u002Fusr\u002Fshare\u002Fgraylog\u002Fplugin\nhttp_bind_address = 0.0.0.0:9000\n#http_publish_uri = https:\u002F\u002F$http_bind_address\n#http_external_uri = https:\u002F\u002F0.0.0.0:9000\u002F\n#http_enable_cors = true\n#http_enable_gzip = true\n#http_max_header_size = 8192\n#http_thread_pool_size = 16\n#http_enable_tls = true\n#http_tls_cert_file = \u002Fetc\u002Fgraylog\u002Fserver\u002Fcert.pem\n#http_tls_key_file = \u002Fetc\u002Fgraylog\u002Fserver\u002Fpkcs8-encrypted.pem\n#http_tls_key_password = \u003Cpassword\u003E\nrotation_strategy = count\n#elasticsearch_hosts = http:\u002F\u002F127.0.0.1:9200\nelasticsearch_discovery_zen_ping_multicast_enabled = false  \nelasticsearch_discovery_zen_ping_unicast_hosts = 127.0.0.1:9200\nelasticsearch_max_docs_per_index = 20000000\nelasticsearch_max_number_of_indices = 20\nretention_strategy = delete\nelasticsearch_shards = 1\nelasticsearch_replicas = 0\nelasticsearch_index_prefix = graylog\nallow_leading_wildcard_searches = false\nallow_highlighting = false\nelasticsearch_analyzer = standard\noutput_batch_size = 500\noutput_flush_interval = 1\noutput_fault_count_threshold = 5\noutput_fault_penalty_seconds = 30\nprocessbuffer_processors = 5\noutputbuffer_processors = 3\nprocessor_wait_strategy = blocking\nring_size = 65536\ninputbuffer_ring_size = 65536\ninputbuffer_processors = 2\ninputbuffer_wait_strategy = blocking\nmessage_journal_enabled = true\nmessage_journal_dir = \u002Fvar\u002Flib\u002Fgraylog-server\u002Fjournal\nlb_recognition_period_seconds = 3\nmongodb_uri = mongodb:\u002F\u002F\u003Cusername\u003E:\u003Cpassword\u003E@127.0.0.1:27017\u002Fgraylog?gssapiServiceName=mongodb\nmongodb_max_connections = 1000\nmongodb_threads_allowed_to_block_multiplier = 5\ncontent_packs_dir = \u002Fusr\u002Fshare\u002Fgraylog-server\u002Fcontentpacks\ncontent_packs_auto_load = grok-patterns.json\nproxied_requests_thread_pool_size = 32\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"I believe for multi-node we need to modify the following settings:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"is_master = false # only one master all others false\nnode_id_file = \u002Fetc\u002Fgraylog\u002Fserver\u002F\u003Cunique-node-id\u003E\nelasticsearch_hosts = # comma separated ips for all elasticsearch hosts\nelasticsearch_shards = # number of hosts\nmongodb_uri = mongodb:\u002F\u002F\u003Cusername\u003E:\u003Cpassword\u003E@\u003Cip\u003E:27017\u002F\u003Cip\u003E:27017\u002Fgraylog?replicaSet=\"rs01\"\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Again, i reiterate, i never got it working correctly, so you need to read and play around. But if you end up getting a working multi-node setup let me know!"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"In regards to the Graylog 3 logs, I ended up using syslog-ng and adding the following to the "},{type:b,tag:d,props:{},children:[{type:a,value:"\u002Fetc\u002Fsyslog-ng\u002Fsyslog.conf"}]},{type:a,value:" and filtering the graylog data to "},{type:b,tag:d,props:{},children:[{type:a,value:"\u002Fvar\u002Flog\u002Fgraylog.log"}]},{type:a,value:":"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"# Graylog configuration\ndestination d_graylog { file(\"\u002Fvar\u002Flog\u002Fgraylog.log\"); };\nfilter f_graylog { program(\"graylog\"); };\nlog { source(src); filter(f_graylog); destination(d_graylog); };\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"I also like to forward all my syslog using TCP for Graylog to capture"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"# Define TCP syslog destination.\ndestination d_net { syslog(\"0.0.0.0\" port(8514)); };\nlog { source(src); destination(d_net); };\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Lastly open all firewall ports if you haven't such as 9200, 27017, 9000, etc. for multi-node otherwise how can each member\u002Fnode\u002Fetc communicate?"}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002Fgraylog",extension:".md",slug:u,createdAt:"2020-07-22T00:27:09.689Z",updatedAt:"2020-07-22T00:30:14.066Z"},prev:{title:"GPU Pass-through Manjaro Walk-through",updateAt:q,slug:"gpu-passthrough"},next:{title:"I See the Truth Now!!! Imgur API",updateAt:q,slug:"imgur"}}],fetch:[],mutations:[]}}("text","element","\n","code","p","div","nuxt-content-highlight","pre","language-text","line-numbers","a","nofollow","noopener","noreferrer","_blank","docs","2020-07-19T03:00:00.000Z","Graylog 3 Trial and Error Walk-through","rs01","rs0","graylog","\u002Fetc\u002Fmongodb.conf","strong","note","node.name")));