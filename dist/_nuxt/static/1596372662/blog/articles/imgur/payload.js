__NUXT_JSONP__("/blog/articles/imgur", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){return {data:[{article:{title:l,description:"An update to my original Google API post. I discuss the use of Imgur API and PHP.",img:"phil-hauser-zlOjvMDN498-unsplash.jpg",alt:l,featured:0,author:{name:"Jesse Quinn",bio:"All about Jesse",img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1533636721434-0e2d61030955?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2550&q=80",alt:"profile photo"},publishedAt:"2019-10-28T03:00:00.000Z",updateAt:f,toc:[],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:a,value:"Well well.. as predicted.. I needed to move APIs. Essentially Google Photos API baseurl keeps changing which means that you do not have a static public url for your images. Well, goodbye Google and hello "},{type:b,tag:m,props:{href:"https:\u002F\u002Fapidocs.imgur.com\u002F#intro",rel:[n,o,p],target:q},children:[{type:a,value:"Imgur"}]},{type:a,value:". "}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To access the Imgur API you will need to sign up for a basic account along with a developer API. Like the Google API, you will use OAuth2 to access your content. Once signed up, you should have a "},{type:b,tag:e,props:{},children:[{type:a,value:"client id"}]},{type:a,value:" and "},{type:b,tag:e,props:{},children:[{type:a,value:"client secret"}]},{type:a,value:" for your callback url. A really nice PHP based api wrapper exists "},{type:b,tag:m,props:{href:"https:\u002F\u002Fgithub.com\u002Fj0k3r\u002Fphp-imgur-api-client",rel:[n,o,p],target:q},children:[{type:a,value:"php-imgur-api-client"}]},{type:a,value:" that follows the available API endpoints. Here I provide an example function to work with the API wrapper:"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"private function uploadImage($filename, $uploadedFile, $session)\n{\n    $client = new Imgur\\Client();\n    $client-\u003EsetAccessToken($session-\u003Erefresh_token);\n    $listAlbumsResponse = $client-\u003Eapi('account')-\u003Ealbums();\n\n    foreach ($listAlbumsResponse as $key =\u003E $jsons) {\n        foreach ($jsons as $key =\u003E $value) {\n            if ($key === 'id') {\n                $albumId = $value;\n            }\n\n            if ($key === 'title' and $value === 'jessequinninfo') {\n                $albumExists = true;\n                break;\n            }\n        }\n    }\n\n    if (!$albumExists) {\n        $createAlbumResponse = $client-\u003Eapi('album')-\u003Ecreate([\n            'title' =\u003E 'jessequinninfo',\n            'description' =\u003E 'album for jessequinn.info',\n            'privacy' =\u003E 'public',\n        ]);\n\n        foreach ($createAlbumResponse as $key =\u003E $value) {\n            if ($key === 'id') {\n                $albumId = $value;\n            }\n        }\n    }\n\n    $uploadPhotoResponse = $client-\u003Eapi('image')-\u003Eupload([\n        'image' =\u003E base64_encode(file_get_contents($uploadedFile-\u003Efile)),\n        'type' =\u003E 'base64',\n        'album' =\u003E $albumId,\n        'title' =\u003E 'blog image',\n        'description' =\u003E 'new post photo for blog',\n    ]);\n\n    foreach ($uploadPhotoResponse as $key =\u003E $value) {\n        if ($key === 'link') {\n            $filename = $value;\n        }\n\n        if ($key === 'deletehash') {\n            $deletehash = $value;\n        }\n    }\n\n    return $filename .= ', ' . $deletehash;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I grab my token from my session variable, grab a list of albums, keep the id, and find the title that matches my album name. I do not want to create duplicates, so i have the create album within an if statement. Next I upload an image with the "},{type:b,tag:e,props:{},children:[{type:a,value:"$albumId"}]},{type:a,value:" and finally i check and keep the link and deletehash. "}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To connect to Imgur I simply do the following:"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"public function connectWithImgur(Request $request, Response $response, $args)\n{\n    $session = new RKA\\Session();\n\n    if ($session-\u003Euser_role == 'Admin') {\n        $client = new Imgur\\Client();\n        $client-\u003EsetOption('client_id', getenv('SOMEENVVARIABLE'));\n        $client-\u003EsetOption('client_secret', getenv('SOMEENVVARIABLE'));\n\n        if (isset($session-\u003Erefresh_token)) {\n            $client-\u003EsetAccessToken($session-\u003Erefresh_token);\n\n            if ($client-\u003EcheckAccessTokenExpired()) {\n                $client-\u003ErefreshToken();\n            }\n\n            return $response-\u003EwithRedirect($this-\u003Erouter-\u003EpathFor('admin-list-posts'));\n        } elseif ($request-\u003EgetQueryParam('code', $default = null) != null) {\n            $client-\u003ErequestAccessToken($request-\u003EgetQueryParam('code'));\n            $session-\u003Erefresh_token = $client-\u003EgetAccessToken();\n        } else {\n            return $response-\u003EwithHeader('Location', $client-\u003EgetAuthenticationUrl());\n        }\n    }\n\n    return $response-\u003EwithRedirect($this-\u003Erouter-\u003EpathFor('blog-list-posts'));\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In retrospect, Imgur is far superior than Google Photos as you can delete images!!!"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"$client = new Imgur\\Client();\n$client-\u003EsetAccessToken($session-\u003Erefresh_token);\n$pieces = explode(',', $post_delete['post_img']);\n$client-\u003Eapi('image')-\u003EdeleteImage(ltrim($pieces[1]));\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I hope this helps someone and please stay away from Google Photos API."}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002Fimgur",extension:".md",slug:"imgur",createdAt:"2020-07-22T00:27:09.699Z",updatedAt:"2020-07-22T00:30:14.080Z"},prev:{title:"Graylog 3 Trial and Error Walk-through",updateAt:f,slug:"graylog"},next:{title:"LAMP Installation on Manjaro",updateAt:f,slug:"lamp"}}],fetch:[],mutations:[]}}("text","element","\n","p","code","2020-07-19T03:00:00.000Z","div","nuxt-content-highlight","pre","language-text","line-numbers","I See the Truth Now!!! Imgur API","a","nofollow","noopener","noreferrer","_blank")));